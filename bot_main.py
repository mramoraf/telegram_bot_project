from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
import logging
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from keyboards import *
import urls
from aiogram.dispatcher import FSMContext

import os
from dotenv import load_dotenv


load_dotenv()

TOKEN = os.getenv('TOKEN')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


async def set_default_commands(dp):
    await bot.set_my_commands(
        [
            types.BotCommand('start', '–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞'),
            types.BotCommand('sections', '–û–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é'),
            
        ]
    )



# @dp.message_handler(commands='start')
# async def start(message:types.message):
    
#     await message.answer(text='–ü—Ä–∏–≤—ñ—Ç! –Ø - –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑ –ø—Ä–∞–∫—Ç–∏–∫–æ—é –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏üìù')
    
   


# dp.message_handler(commands='choose_section')
# async def choose(message: types.Message, state:FSMContext):
#     kb = [
#         [types.KeyboardButton('listening'),types.KeyboardButton('reading')],
#         [types.KeyboardButton('grammar'), types.KeyboardButton('use of English')],
#         [types.KeyboardButton('level test')]
#     ]
#     keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, selective=True)
#     await message.answer(text='–û–±–∏—Ä–∞–π —Å–µ–∫—Ü—ñ—é, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å —ñ –¥–∞–≤–∞–π –ø–æ—á–∏–Ω–∞—Ç–∏!üòº', reply_markup=keyboard)
#     await state.set_state('choose_type_of_task')






@dp.message_handler(commands='start')
async def start(message:types.message, state:FSMContext):
    kb = [
        [types.KeyboardButton('listening'),types.KeyboardButton('reading')],
        [types.KeyboardButton('grammar'), types.KeyboardButton('use of English')],
        [types.KeyboardButton('level test')]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, selective=True)
    await message.answer(text='–ü—Ä–∏–≤—ñ—Ç! –Ø - –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑ –ø—Ä–∞–∫—Ç–∏–∫–æ—é –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏üìù\n–û–±–∏—Ä–∞–π —Å–µ–∫—Ü—ñ—é, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å —ñ –¥–∞–≤–∞–π –ø–æ—á–∏–Ω–∞—Ç–∏!üòº', reply_markup=keyboard)
    await state.set_state('choose_type_of_task')
    
    
    







@dp.message_handler(content_types=['text'], state='choose_type_of_task')
async def choose_section(message:types.message, state=FSMContext):
    if message.text == 'listening':
        kb = [
            [types.KeyboardButton('–í—ñ–¥–µ–æ –∑ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ —Ç–µ–º–∏'), types.KeyboardButton('–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ç–µ–º–æ—é –Ω–∞ –≤–∏–±—ñ—Ä')],
            [types.KeyboardButton('–ö–æ—Ä–æ—Ç–∫—ñ –≤—ñ–¥–µ–æ –∑ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –¥–ª—è —Ä—ñ–∑–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è'), types.KeyboardButton('–ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ –∞–Ω–≥–ª–æ–º–æ–≤–Ω–∏—Ö –ø—ñ—Å–Ω—è—Ö')]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, selective=True)
        await message.answer(text='–°—É–ø–µ—Ä! –ê —Ç–µ–ø–µ—Ä –æ–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç —è–∫ –±–∏ —Ç–∏ —Ö–æ—Ç—ñ–≤ –ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ª—ñ—Å–µ–Ω—ñ–Ω–≥üí™üèø', reply_markup=keyboard)
        await state.set_state('choose_task')
    elif message.text == 'reading':
        url1 = my_urls['reading']['url1']
        url2 = my_urls['reading']['url2']
        my_message = f'–î–æ–±—Ä–µ! –¢—Ä–∏–º–∞–π –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∞–π—Ç–∏ –∑ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏–º–∏ –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ —Ç–µ–º–∏ —Ç–∞ —Ä—ñ–≤–Ω—ñ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ç–≤–æ–≥–æ —Ä—ñ–¥—ñ–Ω–≥—Éüòé:\n1Ô∏è‚É£{url1}\n2Ô∏è‚É£{url2}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'grammar':
        kb = [
            [types.KeyboardButton('tenses'), types.KeyboardButton('modal verbs'), types.KeyboardButton('prepositions')],
            [types.KeyboardButton('If clauses'), types.KeyboardButton('passive voice'), types.KeyboardButton('gerund - infinitive')]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, selective=True)
        await message.answer(text='–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–∏–∑–Ω–∞—á–∏—Å—å –∑ —Ç–µ–º–æ—é —è–∫–∞ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ü§ùüèø', reply_markup=keyboard)
        await state.set_state('choose_task')
    elif message.text == 'use of English':
        kb = [
            [types.KeyboardButton('general vocabulary exercises'), types.KeyboardButton('word formation'), types.KeyboardButton('various exercises')]
        ]
        keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, selective=True)
        await message.answer(text='–§–∞–π–Ω–æ! –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —è–∫—ñ —Å–∞–º–µ –≤–ø—Ä–∞–≤–∏ —Ç–∏ —Ö–æ—á–µ—à —Ä–æ–±–∏—Ç–∏üëÄ', reply_markup=keyboard)
        await state.set_state('choose_task')
    elif message.text == 'level test':
        url = my_urls['level_test']['url']
        my_message2 = f'–©–µ –Ω–µ –∑–Ω–∞—î—à —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å? –¢–æ–¥—ñ –ª–æ–≤–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–µ—Å—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–≤–æ—ó—Ö –∑–Ω–∞–Ω—å –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π –º–æ–≤—ñüí°\n{url}'
        await message.answer(text=my_message2)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    else:
        await message.answer(text='–í–∏–±–∞—á, –∞–ª–µ —Ç–∞–∫–æ—ó —Å–µ–∫—Ü—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüò¢')








@dp.message_handler(commands='sections')
async def choose_section_again(message: types.message, state:FSMContext):
    kb = [

        [types.KeyboardButton('listening'),types.KeyboardButton('reading')],
        [types.KeyboardButton('grammar'), types.KeyboardButton('use of English')],
        [types.KeyboardButton('level test')]
    
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, selective=True)
    await message.answer(text='–û–±–µ—Ä–∏ —Å–µ–∫—Ü—ñ—é, —è–∫–∞ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å', reply_markup=keyboard)
    await state.set_state('choose_type_of_task')
    








@dp.message_handler(content_types=['text'], state='choose_task')
async def choose_exercise(message: types.message, state:FSMContext):
    if message.text == '–í—ñ–¥–µ–æ –∑ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –Ω–∞ —Ä—ñ–∑–Ω—ñ —Ç–µ–º–∏':
        the_url = my_urls['listening']['url1']
        my_message = f'Ororo - —Ü–µ —Ä–µ—Å—É—Ä—Å –¥–µ —Ç–∏ –º–æ–∂–µ—à –¥–∏–≤–∏—Ç–∏—Å—è –µ–ø—ñ–∑–æ–¥–∏ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö —à–æ—É —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º –Ω–∞ –Ω–µ –¥—É–∂–µ –≤–∏—Å–æ–∫–æ–º—É —Ä—ñ–≤–Ω—ñ –∑–Ω–∞–Ω–Ω—è –º–æ–≤–∏ –∑ –∞–Ω–≥–ª—ñ–π—Å—å–∫–∏–º–∏ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏üì∞\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == '–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ç–µ–º–æ—é –Ω–∞ –≤–∏–±—ñ—Ä':
        the_url = my_urls['listening']['url2']
        my_message = f'–¶–µ–π —Å–∞–π—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∫—Ä–∞—â–µ —Ä–æ–∑—É–º—ñ—Ç–∏ —Å–µ–∫—Ü—ñ—é –ª—ñ—Å–µ–Ω—ñ–Ω–≥ —Ç–∞ —è–∫ –∫—Ä–∞—â–µ –∑ –Ω–µ—é –ø—Ä–∞—Ü—é–≤–∞—Ç–∏üóÉÔ∏è\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == '–ö–æ—Ä–æ—Ç–∫—ñ –≤—ñ–¥–µ–æ –∑ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –¥–ª—è —Ä—ñ–∑–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è':
        the_url = my_urls['listening']['url3']
        my_message = f'EnglishCentral - –º—ñ—Å—Ü–µ –¥–µ —Ç–∏ –∑–º–æ–∂–µ—à –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏—Å—è —è–∫—â–æ –≤ —Ç–µ–±–µ –Ω–µ —Ç–∞–∫ –±–∞–≥–∞—Ç–æ —á–∞—Å—É, –±–æ –≤—ñ–¥–µ–æ —Ç–∞–º –∑–∞–∑–≤–∏—á–∞–π –Ω–µ –¥–æ–≤—à–µ –Ω—ñ–∂ 2 —Ö–≤‚è±Ô∏è\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == '–ü—Ä–∞–∫—Ç–∏–∫–∞ –Ω–∞ –∞–Ω–≥–ª–æ–º–æ–≤–Ω–∏—Ö –ø—ñ—Å–Ω—è—Ö':
        the_url = my_urls['listening']['url4']
        my_message = f'Lyricstraining —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —ñ—Å—Ç–∏–Ω–Ω–∏—Ö —Ñ–∞–Ω–∞—Ç—ñ–≤ –º—É–∑–∏–∫–∏. –ó–∞–≤–¥—è–∫–∏ —Ü—å–æ–º—É —Ä–µ—Å—É—Ä—Å—É —Ç–∏ –º–∞—î—à –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —Å–ª—É—Ö–∞—Ç–∏ —É–ª—é–±–ª–µ–Ω–Ω—ñ –ø—ñ—Å–Ω—ñ —Ç–∞ –æ–¥–Ω–æ—á–∞—Å–Ω–æ –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ —Å–≤–æ—î —Ä–æ–∑—É–º—ñ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –Ω–∞ —Å–ª—É—Öüé∂\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'tenses':
        the_url = my_urls['grammar']['url1']
        my_message = f'–¢—É—Ç –∑—ñ–±—Ä–∞–Ω—ñ  –≤–ø—Ä–∞–≤–∏ –ø–æ –≤—Å—ñ—Ö —á–∞—Å–∞—Ö –≤ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ–π üñáÔ∏è\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'modal verbs':
        the_url = my_urls['grammar']['url2']
        my_message = f'–û—Å—å —Ç—É—Ç —Ç–∏ –∑–Ω–∞–π–¥–µ—à –≤–ø—Ä–∞–≤–∏ –Ω–∞ –±—É–¥—å-—è–∫—ñ —Ñ–æ—Ä–º–∏ –º–æ–¥–∞–ª—å–Ω–∏—Ö –¥—ñ—î—Å–ª—ñ–≤üìå\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'prepositions':
        the_url = my_urls['grammar']['url3']
        my_message = f'–ü–µ—Ä–µ–π—à–æ–≤—à–∏ –∑–∞ —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∏ –∑–Ω–∞–π–¥–µ—à –±—ñ–ª—å—à –Ω—ñ–∂ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≤–ø—Ä–∞–≤ –Ω–∞ –ø—Ä–∏–π–º–µ–Ω–Ω–∏–∫–∏üìñ\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'If clauses':
        the_url = my_urls['grammar']['url4']
        my_message = f'–ù–∞ —Ç–µ–±–µ –≤–∂–µ —á–µ–∫–∞—é—Ç—å, –Ω–∞ –ø–µ—Ä—à–∏–π –ø–æ–≥–ª—è–¥, —Ç–∞–∫—ñ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ –∫–æ–Ω–¥—ñ—à–∏–Ω–∞–ª—Å–∏ü´°\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'passive voice':
        the_url = my_urls['grammar']['url5']
        my_message = f'–õ–æ–≤–∏ —Ç—Ä–æ—Ö–∏ –≤–ø—Ä–∞–≤ –Ω–∞ –ø–∞—Å–∏–≤–∏‚úèÔ∏è\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'gerund - infinitive':
        the_url = my_urls['grammar']['url6']
        my_message = f'–û–±—Ä–∞–≤—à–∏ —Ü—é —Ç–µ–º—É, —è –≤–∂–µ –º–æ–∂—É –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —â–æ —Ç–∏ –¥–æ—Å–∏—Ç—å —Ö–æ—Ä–æ–±—Ä–∞ –ª—é–¥–∏–Ω–∞ü§î\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'general vocabulary exercises':
        the_url = my_urls['use_of_english']['url3']
        my_message = f'–¢—Ä–∏–º–∞–π, —Ç—É—Ç —î –¥–æ—Å–∏—Ç—å –±–∞–≥–∞—Ç–æ –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–æ–≥–æ –∑–∞–ø–∞—Å—Éüìö\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'word formation':
        the_url = my_urls['use_of_english']['url2']
        my_message = f'–¢—É—Ç –∑–Ω–∞–π–¥–µ—à –ø—Ä–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–≤–¥–∞–Ω—å –Ω–∞ –≤—ñ–¥—Ç–æ—á–µ–Ω–Ω—è –Ω–∞–≤–∏—á–∫—ñ–≤ —Å–ª–æ–≤–æ—Ç–≤–æ—Ä–µ–Ω–Ω—è‚úèÔ∏è\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
    elif message.text == 'various exercises':
        the_url = my_urls['use_of_english']['url1']
        my_message = f'–û—Å—å –∑–±—ñ—Ä–∫–∞ –¥–æ—Å–∏—Ç—å —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö –≤–ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ü—ñ—î—ó —Å–µ–∫—Ü—ñ—óüóÇÔ∏è\n{the_url}'
        await message.answer(text=my_message)
        await message.answer(text='*—â–æ–± –ø–µ—Ä–µ–æ–±—Ä–∞—Ç–∏ —Å–µ–∫—Ü—ñ—é –∞–±–æ —Ç–∏–ø –∑–∞–≤–¥–∞–Ω–Ω—è, –æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É sections –≤ –º–µ–Ω—é')
        await state.finish()
        
        
        




async def on_startup(dp):
    await set_default_commands(dp)




if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
